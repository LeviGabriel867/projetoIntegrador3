// server.js (VERS√ÉO ATUALIZADA)

// 1. A PRIMEIRA COISA a se fazer. Garante que process.env seja populado ANTES de qualquer outro c√≥digo.
import dotenv from 'dotenv';
dotenv.config();

// 2. Importar os m√≥dulos necess√°rios
import mongoose from 'mongoose';
import app from './src/app.js'; // Importa a aplica√ß√£o Express j√° configurada a partir de app.js.

// 3. Pegar as vari√°veis de ambiente com seguran√ßa
const PORT = process.env.PORT || 3001;
const DB_URI = process.env.MONGO_URI;

// Fun√ß√£o ass√≠ncrona para controlar a ordem de inicializa√ß√£o
const startServer = async () => {
  try {
    // 4. Validar e Conectar ao MongoDB.
    if (!DB_URI) {
      throw new Error('MONGO_URI n√£o foi definida no arquivo .env. A aplica√ß√£o n√£o pode iniciar.');
    }

    // Tenta conectar ao banco de dados.
    // As op√ß√µes 'useNewUrlParser' e 'useUnifiedTopology' s√£o desnecess√°rias e podem ser removidas.
    await mongoose.connect(DB_URI);
    console.log('‚úÖ Conectado ao MongoDB com sucesso!');

    // 5. APENAS AP√ìS a conex√£o com o banco ser um sucesso, iniciar o servidor Express.
    app.listen(PORT, () => {
      console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
    });
    
  } catch (err) {
    console.error('‚ùå Falha cr√≠tica ao iniciar o servidor:', err.message);
    // Encerra a aplica√ß√£o em caso de erro na inicializa√ß√£o, pois ela n√£o pode funcionar corretamente.
    process.exit(1); 
  }
};

// Inicia todo o processo de inicializa√ß√£o.
startServer();